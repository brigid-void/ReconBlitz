       Fresh unicode-ident v1.0.18
       Fresh cfg-if v1.0.1
       Fresh proc-macro2 v1.0.95
       Fresh autocfg v1.5.0
       Fresh stable_deref_trait v1.2.0
       Fresh quote v1.0.40
       Fresh libc v0.2.174
       Fresh pin-project-lite v0.2.16
       Fresh smallvec v1.15.1
   Compiling syn v2.0.104
       Fresh futures-core v0.3.31
       Fresh futures-sink v0.3.31
       Fresh jobserver v0.1.33
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=syn CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.61 CARGO_PKG_VERSION=2.0.104 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=104 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name syn --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-2.0.104/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg 'feature="clone-impls"' --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="extra-traits"' --cfg 'feature="fold"' --cfg 'feature="full"' --cfg 'feature="parsing"' --cfg 'feature="printing"' --cfg 'feature="proc-macro"' --cfg 'feature="visit"' --cfg 'feature="visit-mut"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "test", "visit", "visit-mut"))' -C metadata=4204bd443243f240 -C extra-filename=-83ad7f961df30135 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern proc_macro2=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libproc_macro2-db2d72dd0171cffe.rmeta --extern quote=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libquote-af654bbd771abd58.rmeta --extern unicode_ident=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libunicode_ident-473132c25d4c6259.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
       Fresh shlex v1.3.0
       Fresh memchr v2.7.5
       Fresh scopeguard v1.2.0
       Fresh once_cell v1.21.3
       Fresh bytes v1.10.1
       Fresh lock_api v0.4.13
       Fresh cc v1.2.27
       Fresh parking_lot_core v0.9.11
       Fresh futures-channel v0.3.31
       Fresh slab v0.4.10
       Fresh futures-task v0.3.31
       Fresh pin-utils v0.1.0
       Fresh itoa v1.0.15
       Fresh pkg-config v0.3.32
       Fresh vcpkg v0.2.15
       Fresh futures-io v0.3.31
       Fresh parking_lot v0.12.4
       Fresh socket2 v0.5.10
       Fresh signal-hook-registry v1.4.5
       Fresh mio v1.0.4
       Fresh writeable v0.6.1
       Fresh litemap v0.8.0
       Fresh bitflags v2.9.1
       Fresh fnv v1.0.7
   Compiling http v0.2.12
   Compiling tracing-core v0.1.34
       Fresh equivalent v1.0.2
   Compiling hashbrown v0.15.4
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=tracing_core CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34/Cargo.toml CARGO_PKG_AUTHORS='Tokio Contributors <team@tokio.rs>' CARGO_PKG_DESCRIPTION='Core primitives for application-level tracing.
' CARGO_PKG_HOMEPAGE='https://tokio.rs' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=tracing-core CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tokio-rs/tracing' CARGO_PKG_RUST_VERSION=1.65.0 CARGO_PKG_VERSION=0.1.34 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=34 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name tracing_core --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-core-0.1.34/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(flaky_tests)' --check-cfg 'cfg(tracing_unstable)' --check-cfg 'cfg(unsound_local_offset)' --cfg 'feature="once_cell"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "once_cell", "std", "valuable"))' -C metadata=497fd9528a4cd866 -C extra-filename=-63db7c979ec59139 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern once_cell=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libonce_cell-6ffa3ec7699b4565.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=hashbrown CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/Cargo.toml CARGO_PKG_AUTHORS='Amanieu d'\''Antras <amanieu@gmail.com>' CARGO_PKG_DESCRIPTION='A Rust port of Google'\''s SwissTable hash map' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=hashbrown CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/hashbrown' CARGO_PKG_RUST_VERSION=1.65.0 CARGO_PKG_VERSION=0.15.4 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=15 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name hashbrown --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hashbrown-0.15.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "allocator-api2", "core", "default", "default-hasher", "equivalent", "inline-more", "nightly", "raw-entry", "rayon", "rustc-dep-of-std", "rustc-internal-api", "serde"))' -C metadata=9a79968ccd74c4ef -C extra-filename=-2056585d87937102 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=http CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>:Carl Lerche <me@carllerche.com>:Sean McArthur <sean@seanmonstar.com>' CARGO_PKG_DESCRIPTION='A set of types for representing HTTP requests and responses.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=http CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/hyperium/http' CARGO_PKG_RUST_VERSION=1.49.0 CARGO_PKG_VERSION=0.2.12 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=12 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name http --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=e3cd6a51b3928311 -C extra-filename=-a263f90ce83914e4 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern bytes=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libbytes-f9d4ab05875e902c.rmeta --extern fnv=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libfnv-dfd039cd0a5c863e.rmeta --extern itoa=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libitoa-c217091e727987c9.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
warning: trait `Sealed` is never used
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/lib.rs:210:15
    |
210 |     pub trait Sealed {}
    |               ^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/header/map.rs:2320:35
     |
2320 |         let entry = unsafe { &mut (*self.map).entries[self.entry] };
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
     = note: `#[warn(dangerous_implicit_autorefs)]` on by default
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
2320 |         let entry = unsafe { &mut (&mut (*self.map).entries)[self.entry] };
     |                                   +++++                    +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/header/map.rs:2328:43
     |
2328 |                 let extra = unsafe { &mut (*self.map).extra_values[idx] };
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
2328 |                 let extra = unsafe { &mut (&mut (*self.map).extra_values)[idx] };
     |                                           +++++                         +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/header/map.rs:2958:35
     |
2958 |         let entry = unsafe { &mut (*self.map).entries[self.index] };
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
2958 |         let entry = unsafe { &mut (&mut (*self.map).entries)[self.index] };
     |                                   +++++                    +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/header/map.rs:2978:43
     |
2978 |                 let extra = unsafe { &mut (*self.map).extra_values[idx] };
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
2978 |                 let extra = unsafe { &mut (&mut (*self.map).extra_values)[idx] };
     |                                           +++++                         +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/header/map.rs:3001:35
     |
3001 |         let entry = unsafe { &mut (*self.map).entries[self.index] };
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
3001 |         let entry = unsafe { &mut (&mut (*self.map).entries)[self.index] };
     |                                   +++++                    +

warning: implicit autoref creates a reference to the dereference of a raw pointer
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-0.2.12/src/header/map.rs:3010:43
     |
3010 |                 let extra = unsafe { &mut (*self.map).extra_values[idx] };
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: creating a reference requires the pointer target to be valid and imposes aliasing requirements
help: try using a raw pointer method instead; or if this reference is intentional, make it explicit
     |
3010 |                 let extra = unsafe { &mut (&mut (*self.map).extra_values)[idx] };
     |                                           +++++                         +

   Compiling serde v1.0.219
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A generic serialization/deserialization framework' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.219 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=219 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="serde_derive"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "derive", "rc", "serde_derive", "std", "unstable"))' -C metadata=89e12f93a2f3a82b -C extra-filename=-f06cddfb0f444f37 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/serde-f06cddfb0f444f37 -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling httparse v1.10.1
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml CARGO_PKG_AUTHORS='Sean McArthur <sean@seanmonstar.com>' CARGO_PKG_DESCRIPTION='A tiny, safe, speedy, zero-copy HTTP/1.x parser.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=httparse CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/seanmonstar/httparse' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.10.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(httparse_simd)' --check-cfg 'cfg(httparse_simd_target_feature_avx2)' --check-cfg 'cfg(httparse_simd_target_feature_sse42)' --check-cfg 'cfg(httparse_simd_neon_intrinsics)' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=30dc5f60f9c4c2ff -C extra-filename=-782be822dc54b7a0 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/httparse-782be822dc54b7a0 -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE=default,derive,serde_derive,std CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='-Clink-arg=-fuse-ld=/usr/bin/mold' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_DERIVE=1 CARGO_FEATURE_SERDE_DERIVE=1 CARGO_FEATURE_STD=1 CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.219/Cargo.toml CARGO_PKG_AUTHORS='Erick Tryzelaar <erick.tryzelaar@gmail.com>:David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='A generic serialization/deserialization framework' CARGO_PKG_HOMEPAGE='https://serde.rs' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=serde CARGO_PKG_README=crates-io.md CARGO_PKG_REPOSITORY='https://github.com/serde-rs/serde' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.219 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=219 CARGO_PKG_VERSION_PRE='' DEBUG=true HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/Documents/GitHub/ReconBlitz/target/debug:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=4 OPT_LEVEL=0 OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/serde-475659411e5b3d50/out PROFILE=debug RUSTC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=clang RUSTDOC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=x86_64-unknown-linux-gnu /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/serde-f06cddfb0f444f37/build-script-build`
[serde 1.0.219] cargo:rerun-if-changed=build.rs
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_core_cstr)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_core_error)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_core_net)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_core_num_saturating)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_core_try_from)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_diagnostic_namespace)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_float_copysign)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_num_nonzero_signed)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_relaxed_trait_bounds)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_serde_derive)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_std_atomic)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_std_atomic64)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_systemtime_checked_add)
[serde 1.0.219] cargo:rustc-check-cfg=cfg(no_target_has_atomic)
   Compiling indexmap v2.10.0
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=indexmap CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.10.0 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.10.0/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='A hash table with consistent order and fast iteration.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=indexmap CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/indexmap-rs/indexmap' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=2.10.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name indexmap --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/indexmap-2.10.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 '--allow=clippy::style' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("arbitrary", "borsh", "default", "quickcheck", "rayon", "serde", "std", "test_debug"))' -C metadata=108018edec455c42 -C extra-filename=-f48b087576fe5f5b --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern equivalent=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libequivalent-f3995511e976724e.rmeta --extern hashbrown=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libhashbrown-2056585d87937102.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE=default,std CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='-Clink-arg=-fuse-ld=/usr/bin/mold' CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_STD=1 CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml CARGO_PKG_AUTHORS='Sean McArthur <sean@seanmonstar.com>' CARGO_PKG_DESCRIPTION='A tiny, safe, speedy, zero-copy HTTP/1.x parser.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=httparse CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/seanmonstar/httparse' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.10.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' DEBUG=true HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/Documents/GitHub/ReconBlitz/target/debug:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=4 OPT_LEVEL=0 OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/httparse-e23c9f06518f8bb2/out PROFILE=debug RUSTC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=clang RUSTDOC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=x86_64-unknown-linux-gnu /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/httparse-782be822dc54b7a0/build-script-build`
[httparse 1.10.1] cargo:rustc-cfg=httparse_simd_neon_intrinsics
[httparse 1.10.1] cargo:rustc-cfg=httparse_simd
   Compiling tracing v0.1.41
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=tracing CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/Cargo.toml CARGO_PKG_AUTHORS='Eliza Weisman <eliza@buoyant.io>:Tokio Contributors <team@tokio.rs>' CARGO_PKG_DESCRIPTION='Application-level tracing for Rust.
' CARGO_PKG_HOMEPAGE='https://tokio.rs' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=tracing CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tokio-rs/tracing' CARGO_PKG_RUST_VERSION=1.63.0 CARGO_PKG_VERSION=0.1.41 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=41 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name tracing --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tracing-0.1.41/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(flaky_tests)' --check-cfg 'cfg(tracing_unstable)' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("async-await", "attributes", "default", "log", "log-always", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "std", "tracing-attributes", "valuable"))' -C metadata=9457ed8dee8abfcf -C extra-filename=-8ed17011d26e737b --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern pin_project_lite=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libpin_project_lite-223eafe52bc2fab4.rmeta --extern tracing_core=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libtracing_core-63db7c979ec59139.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
warning: `http` (lib) generated 7 warnings
   Compiling icu_properties_data v2.0.1
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=icu_properties_data CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/Cargo.toml CARGO_PKG_AUTHORS='The ICU4X Project Developers' CARGO_PKG_DESCRIPTION='Data for the icu_properties crate' CARGO_PKG_HOMEPAGE='https://icu4x.unicode.org' CARGO_PKG_LICENSE=Unicode-3.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=icu_properties_data CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/unicode-org/icu4x' CARGO_PKG_RUST_VERSION=1.82 CARGO_PKG_VERSION=2.0.1 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/icu_properties_data-ac02295629541810/out /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name icu_properties_data --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_properties_data-2.0.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(icu4x_custom_data)' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=6772cfd2ea5de17a -C extra-filename=-5c1f7c005d1db3a2 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold --check-cfg 'cfg(icu4c_enable_renaming)'`
   Compiling icu_normalizer_data v2.0.0
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=icu_normalizer_data CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/Cargo.toml CARGO_PKG_AUTHORS='The ICU4X Project Developers' CARGO_PKG_DESCRIPTION='Data for the icu_normalizer crate' CARGO_PKG_HOMEPAGE='https://icu4x.unicode.org' CARGO_PKG_LICENSE=Unicode-3.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=icu_normalizer_data CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/unicode-org/icu4x' CARGO_PKG_RUST_VERSION=1.82 CARGO_PKG_VERSION=2.0.0 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=0 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/icu_normalizer_data-95ce34b876ee0749/out /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name icu_normalizer_data --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/icu_normalizer_data-2.0.0/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(icu4x_custom_data)' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=ff0852b94f74ea44 -C extra-filename=-21e30e94ad305a88 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold --check-cfg 'cfg(icu4c_enable_renaming)'`
   Compiling syn v1.0.109
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.109 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=109 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg 'feature="clone-impls"' --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="full"' --cfg 'feature="parsing"' --cfg 'feature="printing"' --cfg 'feature="proc-macro"' --cfg 'feature="quote"' --cfg 'feature="visit-mut"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "quote", "test", "visit", "visit-mut"))' -C metadata=52bf81c935fddf74 -C extra-filename=-f9811cae21cf6493 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/syn-f9811cae21cf6493 -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling foreign-types-shared v0.1.1
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=foreign_types_shared CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-shared-0.1.1 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-shared-0.1.1/Cargo.toml CARGO_PKG_AUTHORS='Steven Fackler <sfackler@gmail.com>' CARGO_PKG_DESCRIPTION='An internal crate used by foreign-types' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=foreign-types-shared CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/sfackler/foreign-types' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.1.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name foreign_types_shared --edition=2015 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-shared-0.1.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=9ebb06dc8db9f30e -C extra-filename=-5fde0265663239d8 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling try-lock v0.2.5
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=try_lock CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/try-lock-0.2.5 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/try-lock-0.2.5/Cargo.toml CARGO_PKG_AUTHORS='Sean McArthur <sean@seanmonstar.com>' CARGO_PKG_DESCRIPTION='A lightweight atomic lock.' CARGO_PKG_HOMEPAGE='https://github.com/seanmonstar/try-lock' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=try-lock CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/seanmonstar/try-lock' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.2.5 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=5 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name try_lock --edition=2015 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/try-lock-0.2.5/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=511b122a5912ee43 -C extra-filename=-88ffb1b0ffab2da0 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling openssl v0.10.73
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73/Cargo.toml CARGO_PKG_AUTHORS='Steven Fackler <sfackler@gmail.com>' CARGO_PKG_DESCRIPTION='OpenSSL bindings' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=openssl CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/sfackler/rust-openssl' CARGO_PKG_RUST_VERSION=1.63.0 CARGO_PKG_VERSION=0.10.73 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=73 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --cfg 'feature="default"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("aws-lc", "bindgen", "default", "unstable_boringssl", "v101", "v102", "v110", "v111", "vendored"))' -C metadata=1c4de222d1416001 -C extra-filename=-957354e6294e2f49 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/openssl-957354e6294e2f49 -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling want v0.3.1
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=want CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/want-0.3.1 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/want-0.3.1/Cargo.toml CARGO_PKG_AUTHORS='Sean McArthur <sean@seanmonstar.com>' CARGO_PKG_DESCRIPTION='Detect when another Future wants a result.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=want CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/seanmonstar/want' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.1 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name want --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/want-0.3.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=79d57080b03c3f9d -C extra-filename=-3057c9a6664c86ee --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern try_lock=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libtry_lock-88ffb1b0ffab2da0.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling foreign-types v0.3.2
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=foreign_types CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-0.3.2 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-0.3.2/Cargo.toml CARGO_PKG_AUTHORS='Steven Fackler <sfackler@gmail.com>' CARGO_PKG_DESCRIPTION='A framework for Rust wrappers over C APIs' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=foreign-types CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/sfackler/foreign-types' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.2 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=2 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name foreign_types --edition=2015 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/foreign-types-0.3.2/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=f407cc3cf54cfc90 -C extra-filename=-37a9761cb9b13875 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern foreign_types_shared=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libforeign_types_shared-5fde0265663239d8.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE=clone-impls,default,derive,full,parsing,printing,proc-macro,quote,visit-mut CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='-Clink-arg=-fuse-ld=/usr/bin/mold' CARGO_FEATURE_CLONE_IMPLS=1 CARGO_FEATURE_DEFAULT=1 CARGO_FEATURE_DERIVE=1 CARGO_FEATURE_FULL=1 CARGO_FEATURE_PARSING=1 CARGO_FEATURE_PRINTING=1 CARGO_FEATURE_PROC_MACRO=1 CARGO_FEATURE_QUOTE=1 CARGO_FEATURE_VISIT_MUT=1 CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.109 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=109 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/Documents/GitHub/ReconBlitz/target/debug:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=4 OPT_LEVEL=0 OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/syn-7724642fd1fd4488/out PROFILE=debug RUSTC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=clang RUSTDOC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=x86_64-unknown-linux-gnu /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/syn-f9811cae21cf6493/build-script-build`
[syn 1.0.109] cargo:rustc-cfg=syn_disable_nightly_tests
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=httparse CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/Cargo.toml CARGO_PKG_AUTHORS='Sean McArthur <sean@seanmonstar.com>' CARGO_PKG_DESCRIPTION='A tiny, safe, speedy, zero-copy HTTP/1.x parser.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=httparse CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/seanmonstar/httparse' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.10.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/httparse-e23c9f06518f8bb2/out /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name httparse --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httparse-1.10.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(httparse_simd)' --check-cfg 'cfg(httparse_simd_target_feature_avx2)' --check-cfg 'cfg(httparse_simd_target_feature_sse42)' --check-cfg 'cfg(httparse_simd_neon_intrinsics)' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "std"))' -C metadata=1536fe3df5483bce -C extra-filename=-96d652b653cbfdde --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold --cfg httparse_simd_neon_intrinsics --cfg httparse_simd`
   Compiling http-body v0.4.6
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=http_body CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-0.4.6 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-0.4.6/Cargo.toml CARGO_PKG_AUTHORS='Carl Lerche <me@carllerche.com>:Lucio Franco <luciofranco14@gmail.com>:Sean McArthur <sean@seanmonstar.com>' CARGO_PKG_DESCRIPTION='Trait representing an asynchronous, streaming, HTTP request or response body.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=http-body CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/hyperium/http-body' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.4.6 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=6 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name http_body --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-0.4.6/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=52fae94028bfab6c -C extra-filename=-30b40491acbda5ce --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern bytes=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libbytes-f9d4ab05875e902c.rmeta --extern http=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libhttp-a263f90ce83914e4.rmeta --extern pin_project_lite=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libpin_project_lite-223eafe52bc2fab4.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE=default CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='-Clink-arg=-fuse-ld=/usr/bin/mold' CARGO_FEATURE_DEFAULT=1 CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-0.10.73/Cargo.toml CARGO_PKG_AUTHORS='Steven Fackler <sfackler@gmail.com>' CARGO_PKG_DESCRIPTION='OpenSSL bindings' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=openssl CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/sfackler/rust-openssl' CARGO_PKG_RUST_VERSION=1.63.0 CARGO_PKG_VERSION=0.10.73 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=10 CARGO_PKG_VERSION_PATCH=73 CARGO_PKG_VERSION_PRE='' DEBUG=true DEP_OPENSSL_CONF=OPENSSL_NO_SSL3_METHOD DEP_OPENSSL_INCLUDE=/usr/include DEP_OPENSSL_VERSION_NUMBER=30500000 HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/Documents/GitHub/ReconBlitz/target/debug:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=4 OPT_LEVEL=0 OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/openssl-ac892230171d850e/out PROFILE=debug RUSTC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=clang RUSTDOC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=x86_64-unknown-linux-gnu /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/openssl-957354e6294e2f49/build-script-build`
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(osslconf, values("OPENSSL_NO_OCB", "OPENSSL_NO_SM4", "OPENSSL_NO_SEED", "OPENSSL_NO_CHACHA", "OPENSSL_NO_CAST", "OPENSSL_NO_IDEA", "OPENSSL_NO_CAMELLIA", "OPENSSL_NO_RC4", "OPENSSL_NO_BF", "OPENSSL_NO_PSK", "OPENSSL_NO_DEPRECATED_3_0", "OPENSSL_NO_SCRYPT", "OPENSSL_NO_SM3", "OPENSSL_NO_RMD160", "OPENSSL_NO_EC2M", "OPENSSL_NO_OCSP", "OPENSSL_NO_CMS", "OPENSSL_NO_EC", "OPENSSL_NO_ARGON2", "OPENSSL_NO_RC2"))
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(boringssl)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(awslc)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl250)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl251)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl261)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl270)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl271)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl273)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl280)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl291)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl310)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl321)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl332)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl340)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl350)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl360)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl361)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl370)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl380)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl382)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl390)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl400)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(libressl410)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl101)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl102)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl110)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl110g)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl110h)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl111)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl111d)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl300)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl310)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl320)
[openssl 0.10.73] cargo:rustc-check-cfg=cfg(ossl330)
[openssl 0.10.73] cargo:rustc-cfg=osslconf="OPENSSL_NO_SSL3_METHOD"
[openssl 0.10.73] cargo:rustc-cfg=ossl101
[openssl 0.10.73] cargo:rustc-cfg=ossl102
[openssl 0.10.73] cargo:rustc-cfg=ossl110
[openssl 0.10.73] cargo:rustc-cfg=ossl110g
[openssl 0.10.73] cargo:rustc-cfg=ossl110h
[openssl 0.10.73] cargo:rustc-cfg=ossl111
[openssl 0.10.73] cargo:rustc-cfg=ossl111d
[openssl 0.10.73] cargo:rustc-cfg=ossl300
[openssl 0.10.73] cargo:rustc-cfg=ossl310
[openssl 0.10.73] cargo:rustc-cfg=ossl320
[openssl 0.10.73] cargo:rustc-cfg=ossl330
   Compiling openssl-sys v0.9.109
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=openssl_sys CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.109 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.109/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>:Steven Fackler <sfackler@gmail.com>' CARGO_PKG_DESCRIPTION='FFI bindings to OpenSSL' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=openssl-sys CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/sfackler/rust-openssl' CARGO_PKG_RUST_VERSION=1.63.0 CARGO_PKG_VERSION=0.9.109 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=109 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/openssl-sys-9055da46a094dc2b/out /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name openssl_sys --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-sys-0.9.109/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("aws-lc", "bindgen", "bssl-sys", "openssl-src", "unstable_boringssl", "vendored"))' -C metadata=34c2c98177197e51 -C extra-filename=-f1824267466dea01 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern libc=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/liblibc-f70737c98156112f.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold -l ssl -l crypto --cfg 'osslconf="OPENSSL_NO_SSL3_METHOD"' --cfg openssl --cfg ossl340 --cfg ossl330 --cfg ossl320 --cfg ossl300 --cfg ossl101 --cfg ossl102 --cfg ossl102f --cfg ossl102h --cfg ossl110 --cfg ossl110f --cfg ossl110g --cfg ossl110h --cfg ossl111 --cfg ossl111b --cfg ossl111c --cfg ossl111d --check-cfg 'cfg(osslconf, values("OPENSSL_NO_OCB", "OPENSSL_NO_SM4", "OPENSSL_NO_SEED", "OPENSSL_NO_CHACHA", "OPENSSL_NO_CAST", "OPENSSL_NO_IDEA", "OPENSSL_NO_CAMELLIA", "OPENSSL_NO_RC4", "OPENSSL_NO_BF", "OPENSSL_NO_PSK", "OPENSSL_NO_DEPRECATED_3_0", "OPENSSL_NO_SCRYPT", "OPENSSL_NO_SM3", "OPENSSL_NO_RMD160", "OPENSSL_NO_EC2M", "OPENSSL_NO_OCSP", "OPENSSL_NO_CMS", "OPENSSL_NO_COMP", "OPENSSL_NO_SOCK", "OPENSSL_NO_STDIO", "OPENSSL_NO_EC", "OPENSSL_NO_SSL3_METHOD", "OPENSSL_NO_KRB5", "OPENSSL_NO_TLSEXT", "OPENSSL_NO_SRP", "OPENSSL_NO_RFC3779", "OPENSSL_NO_SHA", "OPENSSL_NO_NEXTPROTONEG", "OPENSSL_NO_ENGINE", "OPENSSL_NO_BUF_FREELISTS", "OPENSSL_NO_RC2"))' --check-cfg 'cfg(openssl)' --check-cfg 'cfg(libressl)' --check-cfg 'cfg(boringssl)' --check-cfg 'cfg(awslc)' --check-cfg 'cfg(libressl250)' --check-cfg 'cfg(libressl251)' --check-cfg 'cfg(libressl252)' --check-cfg 'cfg(libressl261)' --check-cfg 'cfg(libressl270)' --check-cfg 'cfg(libressl271)' --check-cfg 'cfg(libressl273)' --check-cfg 'cfg(libressl280)' --check-cfg 'cfg(libressl281)' --check-cfg 'cfg(libressl291)' --check-cfg 'cfg(libressl310)' --check-cfg 'cfg(libressl321)' --check-cfg 'cfg(libressl332)' --check-cfg 'cfg(libressl340)' --check-cfg 'cfg(libressl350)' --check-cfg 'cfg(libressl360)' --check-cfg 'cfg(libressl361)' --check-cfg 'cfg(libressl370)' --check-cfg 'cfg(libressl380)' --check-cfg 'cfg(libressl381)' --check-cfg 'cfg(libressl382)' --check-cfg 'cfg(libressl390)' --check-cfg 'cfg(libressl400)' --check-cfg 'cfg(libressl410)' --check-cfg 'cfg(ossl101)' --check-cfg 'cfg(ossl102)' --check-cfg 'cfg(ossl102f)' --check-cfg 'cfg(ossl102h)' --check-cfg 'cfg(ossl110)' --check-cfg 'cfg(ossl110f)' --check-cfg 'cfg(ossl110g)' --check-cfg 'cfg(ossl110h)' --check-cfg 'cfg(ossl111)' --check-cfg 'cfg(ossl111b)' --check-cfg 'cfg(ossl111c)' --check-cfg 'cfg(ossl111d)' --check-cfg 'cfg(ossl300)' --check-cfg 'cfg(ossl310)' --check-cfg 'cfg(ossl320)' --check-cfg 'cfg(ossl330)' --check-cfg 'cfg(ossl340)'`
   Compiling rustix v1.0.7
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.7 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.7/Cargo.toml CARGO_PKG_AUTHORS='Dan Gohman <dev@sunfishcode.online>:Jakub Konka <kubkon@jakubkonka.com>' CARGO_PKG_DESCRIPTION='Safe Rust bindings to POSIX/Unix/Linux/Winsock-like syscalls' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustix CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bytecodealliance/rustix' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.0.7 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.7/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --warn=unexpected_cfgs --check-cfg 'cfg(alloc_c_string)' --check-cfg 'cfg(alloc_ffi)' --check-cfg 'cfg(apple)' --check-cfg 'cfg(asm_experimental_arch)' --check-cfg 'cfg(bsd)' --check-cfg 'cfg(core_c_str)' --check-cfg 'cfg(core_ffi_c)' --check-cfg 'cfg(core_intrinsics)' --check-cfg 'cfg(criterion)' --check-cfg 'cfg(document_experimental_runtime_api)' --check-cfg 'cfg(error_in_core)' --check-cfg 'cfg(fix_y2038)' --check-cfg 'cfg(freebsdlike)' --check-cfg 'cfg(libc)' --check-cfg 'cfg(linux_kernel)' --check-cfg 'cfg(linux_like)' --check-cfg 'cfg(linux_raw)' --check-cfg 'cfg(netbsdlike)' --check-cfg 'cfg(rustc_attrs)' --check-cfg 'cfg(solarish)' --check-cfg 'cfg(staged_api)' --check-cfg 'cfg(static_assertions)' --check-cfg 'cfg(thumb_mode)' --check-cfg 'cfg(wasi)' --check-cfg 'cfg(wasi_ext)' --check-cfg 'cfg(wasip2)' --check-cfg 'cfg(target_arch, values("xtensa"))' --check-cfg 'cfg(target_os, values("cygwin"))' --cfg 'feature="alloc"' --cfg 'feature="fs"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("all-apis", "alloc", "compiler_builtins", "core", "default", "event", "fs", "io_uring", "libc", "libc_errno", "linux_4_11", "linux_5_1", "linux_5_11", "linux_latest", "mm", "mount", "net", "param", "pipe", "process", "pty", "rand", "runtime", "rustc-dep-of-std", "rustc-std-workspace-alloc", "shm", "std", "stdio", "system", "termios", "thread", "time", "try_close", "use-explicitly-provided-auxv", "use-libc", "use-libc-auxv"))' -C metadata=2cca2c712fbc589f -C extra-filename=-9be8830d8bb88c8c --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/rustix-9be8830d8bb88c8c -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling percent-encoding v2.3.1
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=percent_encoding CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1/Cargo.toml CARGO_PKG_AUTHORS='The rust-url developers' CARGO_PKG_DESCRIPTION='Percent encoding and decoding' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=percent-encoding CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/servo/rust-url/' CARGO_PKG_RUST_VERSION=1.51 CARGO_PKG_VERSION=2.3.1 CARGO_PKG_VERSION_MAJOR=2 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name percent_encoding --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature="alloc"' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "std"))' -C metadata=c61d8ee028f4acc0 -C extra-filename=-9d1c0288b06a243b --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/percent-encoding-2.3.1/src/lib.rs:466:35
    |
466 |                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
    |
466 -                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
466 +                     debug_assert!(std::ptr::addr_eq(raw_utf8, &*bytes as *const [u8]));
    |
help: use explicit `std::ptr::eq` method to compare metadata and addresses
    |
466 -                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
466 +                     debug_assert!(std::ptr::eq(raw_utf8, &*bytes as *const [u8]));
    |

warning: `percent-encoding` (lib) generated 1 warning
   Compiling pin-project-internal v0.4.30
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-internal-0.4.30 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-internal-0.4.30/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Implementation detail of the `pin-project` crate.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=pin-project-internal CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/taiki-e/pin-project' CARGO_PKG_RUST_VERSION=1.34 CARGO_PKG_VERSION=0.4.30 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=30 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-internal-0.4.30/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=e3739f8259e31f51 -C extra-filename=-0a6a9940bb92cffe --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/pin-project-internal-0a6a9940bb92cffe -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling native-tls v0.2.14
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14/Cargo.toml CARGO_PKG_AUTHORS='Steven Fackler <sfackler@gmail.com>' CARGO_PKG_DESCRIPTION='A wrapper over a platform'\''s native TLS implementation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=native-tls CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/sfackler/rust-native-tls' CARGO_PKG_RUST_VERSION=1.80.0 CARGO_PKG_VERSION=0.2.14 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=14 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build --edition=2015 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alpn", "vendored"))' -C metadata=e7de723a612b9d29 -C extra-filename=-0f7dad44096b685a --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/native-tls-0f7dad44096b685a -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling log v0.4.27
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=log CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='A lightweight logging facade for Rust
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=log CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-lang/log' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.4.27 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=27 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name log --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/log-0.4.27/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("kv", "kv_serde", "kv_std", "kv_sval", "kv_unstable", "kv_unstable_serde", "kv_unstable_std", "kv_unstable_sval", "max_level_debug", "max_level_error", "max_level_info", "max_level_off", "max_level_trace", "max_level_warn", "release_max_level_debug", "release_max_level_error", "release_max_level_info", "release_max_level_off", "release_max_level_trace", "release_max_level_warn", "serde", "std", "sval", "sval_ref", "value-bag"))' -C metadata=5f1fa80d1a325943 -C extra-filename=-bd19b51e8c16e50b --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling tower-service v0.3.3
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=tower_service CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3/Cargo.toml CARGO_PKG_AUTHORS='Tower Maintainers <team@tower-rs.com>' CARGO_PKG_DESCRIPTION='Trait representing an asynchronous, request / response based, client or server.
' CARGO_PKG_HOMEPAGE='https://github.com/tower-rs/tower' CARGO_PKG_LICENSE=MIT CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=tower-service CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/tower-rs/tower' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=0.3.3 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=3 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name tower_service --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=3b0f6291d533932b -C extra-filename=-733f3003b4056df3 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling httpdate v1.0.3
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=httpdate CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httpdate-1.0.3 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httpdate-1.0.3/Cargo.toml CARGO_PKG_AUTHORS='Pyfisch <pyfisch@posteo.org>' CARGO_PKG_DESCRIPTION='HTTP date parsing and formatting' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=httpdate CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/pyfisch/httpdate' CARGO_PKG_RUST_VERSION=1.56 CARGO_PKG_VERSION=1.0.3 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=3 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name httpdate --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/httpdate-1.0.3/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=5ccaef11f9f4d390 -C extra-filename=-e3f9af47ada5e73c --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE='' CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='-Clink-arg=-fuse-ld=/usr/bin/mold' CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/native-tls-0.2.14/Cargo.toml CARGO_PKG_AUTHORS='Steven Fackler <sfackler@gmail.com>' CARGO_PKG_DESCRIPTION='A wrapper over a platform'\''s native TLS implementation' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=native-tls CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/sfackler/rust-native-tls' CARGO_PKG_RUST_VERSION=1.80.0 CARGO_PKG_VERSION=0.2.14 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=14 CARGO_PKG_VERSION_PRE='' DEBUG=true DEP_OPENSSL_CONF=OPENSSL_NO_SSL3_METHOD DEP_OPENSSL_INCLUDE=/usr/include DEP_OPENSSL_VERSION_NUMBER=30500000 HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/Documents/GitHub/ReconBlitz/target/debug:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=4 OPT_LEVEL=0 OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/native-tls-0c6357b5cc1b7298/out PROFILE=debug RUSTC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=clang RUSTDOC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=x86_64-unknown-linux-gnu /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/native-tls-0f7dad44096b685a/build-script-build`
[native-tls 0.2.14] cargo:rustc-cfg=have_min_max_version
[native-tls 0.2.14] cargo::rustc-check-cfg=cfg(have_min_max_version)
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE='' CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='-Clink-arg=-fuse-ld=/usr/bin/mold' CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-internal-0.4.30 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/pin-project-internal-0.4.30/Cargo.toml CARGO_PKG_AUTHORS='' CARGO_PKG_DESCRIPTION='Implementation detail of the `pin-project` crate.
' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=pin-project-internal CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/taiki-e/pin-project' CARGO_PKG_RUST_VERSION=1.34 CARGO_PKG_VERSION=0.4.30 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=4 CARGO_PKG_VERSION_PATCH=30 CARGO_PKG_VERSION_PRE='' DEBUG=false HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/Documents/GitHub/ReconBlitz/target/debug:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=4 OPT_LEVEL=0 OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/pin-project-internal-e51eff2fc51a5ece/out PROFILE=debug RUSTC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=clang RUSTDOC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=x86_64-unknown-linux-gnu /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/pin-project-internal-0a6a9940bb92cffe/build-script-build`
[pin-project-internal 0.4.30] cargo:rustc-cfg=underscore_consts
[pin-project-internal 0.4.30] cargo:rustc-cfg=deprecated_proc_macro
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CFG_FEATURE=alloc,fs,std CARGO_CFG_PANIC=unwind CARGO_CFG_TARGET_ABI='' CARGO_CFG_TARGET_ARCH=x86_64 CARGO_CFG_TARGET_ENDIAN=little CARGO_CFG_TARGET_ENV=gnu CARGO_CFG_TARGET_FAMILY=unix CARGO_CFG_TARGET_FEATURE=fxsr,sse,sse2 CARGO_CFG_TARGET_HAS_ATOMIC=16,32,64,8,ptr CARGO_CFG_TARGET_OS=linux CARGO_CFG_TARGET_POINTER_WIDTH=64 CARGO_CFG_TARGET_VENDOR=unknown CARGO_CFG_UNIX='' CARGO_ENCODED_RUSTFLAGS='-Clink-arg=-fuse-ld=/usr/bin/mold' CARGO_FEATURE_ALLOC=1 CARGO_FEATURE_FS=1 CARGO_FEATURE_STD=1 CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.7 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rustix-1.0.7/Cargo.toml CARGO_PKG_AUTHORS='Dan Gohman <dev@sunfishcode.online>:Jakub Konka <kubkon@jakubkonka.com>' CARGO_PKG_DESCRIPTION='Safe Rust bindings to POSIX/Unix/Linux/Winsock-like syscalls' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=rustix CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/bytecodealliance/rustix' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=1.0.7 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=7 CARGO_PKG_VERSION_PRE='' DEBUG=true HOST=x86_64-unknown-linux-gnu LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/Documents/GitHub/ReconBlitz/target/debug:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' NUM_JOBS=4 OPT_LEVEL=0 OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/rustix-7a0fdf134441a45c/out PROFILE=debug RUSTC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc RUSTC_LINKER=clang RUSTDOC=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustdoc TARGET=x86_64-unknown-linux-gnu /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/rustix-9be8830d8bb88c8c/build-script-build`
[rustix 1.0.7] cargo:rerun-if-changed=build.rs
[rustix 1.0.7] cargo:rustc-cfg=static_assertions
[rustix 1.0.7] cargo:rustc-cfg=linux_raw
[rustix 1.0.7] cargo:rustc-cfg=linux_like
[rustix 1.0.7] cargo:rustc-cfg=linux_kernel
[rustix 1.0.7] cargo:rerun-if-env-changed=CARGO_CFG_RUSTIX_USE_EXPERIMENTAL_ASM
[rustix 1.0.7] cargo:rerun-if-env-changed=CARGO_CFG_RUSTIX_USE_LIBC
[rustix 1.0.7] cargo:rerun-if-env-changed=CARGO_FEATURE_USE_LIBC
[rustix 1.0.7] cargo:rerun-if-env-changed=CARGO_FEATURE_RUSTC_DEP_OF_STD
[rustix 1.0.7] cargo:rerun-if-env-changed=CARGO_CFG_MIRI
   Compiling form_urlencoded v1.2.1
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=form_urlencoded CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1/Cargo.toml CARGO_PKG_AUTHORS='The rust-url developers' CARGO_PKG_DESCRIPTION='Parser and serializer for the application/x-www-form-urlencoded syntax, as used by HTML forms.' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=form_urlencoded CARGO_PKG_README='' CARGO_PKG_REPOSITORY='https://github.com/servo/rust-url' CARGO_PKG_RUST_VERSION=1.51 CARGO_PKG_VERSION=1.2.1 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=1 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name form_urlencoded --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --cfg 'feature="alloc"' --cfg 'feature="default"' --cfg 'feature="std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("alloc", "default", "std"))' -C metadata=166c5b4be7d6dcf4 -C extra-filename=-608027315a958a28 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern percent_encoding=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libpercent_encoding-9d1c0288b06a243b.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=syn CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Parser for Rust source code' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=syn CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/syn' CARGO_PKG_RUST_VERSION=1.31 CARGO_PKG_VERSION=1.0.109 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=109 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' OUT_DIR=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/syn-7724642fd1fd4488/out /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name syn --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no --cfg 'feature="clone-impls"' --cfg 'feature="default"' --cfg 'feature="derive"' --cfg 'feature="full"' --cfg 'feature="parsing"' --cfg 'feature="printing"' --cfg 'feature="proc-macro"' --cfg 'feature="quote"' --cfg 'feature="visit-mut"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("clone-impls", "default", "derive", "extra-traits", "fold", "full", "parsing", "printing", "proc-macro", "quote", "test", "visit", "visit-mut"))' -C metadata=e89b2e62bb19fd52 -C extra-filename=-5fcba21345a43a75 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern proc_macro2=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libproc_macro2-db2d72dd0171cffe.rmeta --extern quote=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libquote-af654bbd771abd58.rmeta --extern unicode_ident=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libunicode_ident-473132c25d4c6259.rmeta --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold --cfg syn_disable_nightly_tests`
warning: ambiguous wide pointer comparison, the comparison includes metadata which may not be expected
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/form_urlencoded-1.2.1/src/lib.rs:414:35
    |
414 |                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(ambiguous_wide_pointer_comparisons)]` on by default
help: use `std::ptr::addr_eq` or untyped pointers to only compare their addresses
    |
414 -                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
414 +                     debug_assert!(std::ptr::addr_eq(raw_utf8, &*bytes as *const [u8]));
    |
help: use explicit `std::ptr::eq` method to compare metadata and addresses
    |
414 -                     debug_assert!(raw_utf8 == &*bytes as *const [u8]);
414 +                     debug_assert!(std::ptr::eq(raw_utf8, &*bytes as *const [u8]));
    |

   Compiling num-traits v0.2.19
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=build_script_build CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/Cargo.toml CARGO_PKG_AUTHORS='The Rust Project Developers' CARGO_PKG_DESCRIPTION='Numeric traits for generic mathematics' CARGO_PKG_HOMEPAGE='https://github.com/rust-num/num-traits' CARGO_PKG_LICENSE='MIT OR Apache-2.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=num-traits CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/rust-num/num-traits' CARGO_PKG_RUST_VERSION=1.60 CARGO_PKG_VERSION=0.2.19 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=2 CARGO_PKG_VERSION_PATCH=19 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name build_script_build --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/build.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type bin --emit=dep-info,link -C embed-bitcode=no --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("default", "i128", "libm", "std"))' -C metadata=2ee528c80efd8412 -C extra-filename=-1b0c37f99eb560e2 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/build/num-traits-1b0c37f99eb560e2 -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --extern autocfg=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps/libautocfg-3955407c3e7e745b.rlib --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
warning: `form_urlencoded` (lib) generated 1 warning
   Compiling utf8_iter v1.0.4
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=utf8_iter CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/Cargo.toml CARGO_PKG_AUTHORS='Henri Sivonen <hsivonen@hsivonen.fi>' CARGO_PKG_DESCRIPTION='Iterator by char over potentially-invalid UTF-8 in &[u8]' CARGO_PKG_HOMEPAGE='https://docs.rs/utf8_iter/' CARGO_PKG_LICENSE='Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=utf8_iter CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/hsivonen/utf8_iter' CARGO_PKG_RUST_VERSION='' CARGO_PKG_VERSION=1.0.4 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name utf8_iter --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/utf8_iter-1.0.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=75005a32790c5dce -C extra-filename=-6087ae0d1ade4a34 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling linux-raw-sys v0.9.4
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=linux_raw_sys CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/Cargo.toml CARGO_PKG_AUTHORS='Dan Gohman <dev@sunfishcode.online>' CARGO_PKG_DESCRIPTION='Generated bindings for Linux'\''s userspace API' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=linux-raw-sys CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/sunfishcode/linux-raw-sys' CARGO_PKG_RUST_VERSION=1.63 CARGO_PKG_VERSION=0.9.4 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=9 CARGO_PKG_VERSION_PATCH=4 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name linux_raw_sys --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/linux-raw-sys-0.9.4/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --warn=unexpected_cfgs --check-cfg 'cfg(target_arch, values("xtensa"))' --cfg 'feature="elf"' --cfg 'feature="errno"' --cfg 'feature="general"' --cfg 'feature="ioctl"' --cfg 'feature="no_std"' --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("bootparam", "btrfs", "compiler_builtins", "core", "default", "elf", "elf_uapi", "errno", "general", "if_arp", "if_ether", "if_packet", "image", "io_uring", "ioctl", "landlock", "loop_device", "mempolicy", "net", "netlink", "no_std", "prctl", "ptrace", "rustc-dep-of-std", "std", "system", "xdp"))' -C metadata=9e14e383db076338 -C extra-filename=-68a779ba94420fae --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling openssl-probe v0.1.6
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=openssl_probe CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-probe-0.1.6 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-probe-0.1.6/Cargo.toml CARGO_PKG_AUTHORS='Alex Crichton <alex@alexcrichton.com>' CARGO_PKG_DESCRIPTION='Tool for helping to find SSL certificate locations on the system for OpenSSL
' CARGO_PKG_HOMEPAGE='https://github.com/alexcrichton/openssl-probe' CARGO_PKG_LICENSE=MIT/Apache-2.0 CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=openssl-probe CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/alexcrichton/openssl-probe' CARGO_PKG_RUST_VERSION=1.60.0 CARGO_PKG_VERSION=0.1.6 CARGO_PKG_VERSION_MAJOR=0 CARGO_PKG_VERSION_MINOR=1 CARGO_PKG_VERSION_PATCH=6 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name openssl_probe --edition=2021 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/openssl-probe-0.1.6/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values())' -C metadata=7695b5b200a6b33d -C extra-filename=-5931ae12f1f33830 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
   Compiling ryu v1.0.20
     Running `CARGO=/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/cargo CARGO_CRATE_NAME=ryu CARGO_MANIFEST_DIR=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20 CARGO_MANIFEST_PATH=/home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20/Cargo.toml CARGO_PKG_AUTHORS='David Tolnay <dtolnay@gmail.com>' CARGO_PKG_DESCRIPTION='Fast floating point to string conversion' CARGO_PKG_HOMEPAGE='' CARGO_PKG_LICENSE='Apache-2.0 OR BSL-1.0' CARGO_PKG_LICENSE_FILE='' CARGO_PKG_NAME=ryu CARGO_PKG_README=README.md CARGO_PKG_REPOSITORY='https://github.com/dtolnay/ryu' CARGO_PKG_RUST_VERSION=1.36 CARGO_PKG_VERSION=1.0.20 CARGO_PKG_VERSION_MAJOR=1 CARGO_PKG_VERSION_MINOR=0 CARGO_PKG_VERSION_PATCH=20 CARGO_PKG_VERSION_PRE='' LD_LIBRARY_PATH='/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps:/home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib' /home/joandarc/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rustc --crate-name ryu --edition=2018 /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ryu-1.0.20/src/lib.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 --check-cfg 'cfg(docsrs,test)' --check-cfg 'cfg(feature, values("no-panic", "small"))' -C metadata=a01895b7260f67fe -C extra-filename=-65951628338708e7 --out-dir /home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps -C linker=clang -L dependency=/home/joandarc/Documents/GitHub/ReconBlitz/target/debug/deps --cap-lints warn -C link-arg=-fuse-ld=/usr/bin/mold`
warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:254:13
    |
254 | #![cfg_attr(doc_cfg, feature(doc_cfg))]
    |             ^^^^^^^
    |
    = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:430:12
    |
430 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:434:12
    |
434 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:455:12
    |
455 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "printing"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:804:12
    |
804 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:867:12
    |
867 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "proc-macro"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:887:12
    |
887 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:916:12
    |
916 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/lib.rs:959:12
    |
959 | #[cfg_attr(doc_cfg, doc(cfg(all(feature = "parsing", feature = "full"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/group.rs:136:12
    |
136 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/group.rs:214:12
    |
214 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/group.rs:269:12
    |
269 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:561:12
    |
561 | #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:569:12
    |
569 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_omit_await_from_token_macro`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:881:11
    |
881 | #[cfg(not(syn_omit_await_from_token_macro))]
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_omit_await_from_token_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_omit_await_from_token_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_omit_await_from_token_macro`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:883:7
    |
883 | #[cfg(syn_omit_await_from_token_macro)]
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_omit_await_from_token_macro)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_omit_await_from_token_macro)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:394:24
    |
394 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
556 | / define_punctuation_structs! {
557 | |     "_" pub struct Underscore/1 /// `_`
558 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:271:24
    |
271 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:275:24
    |
275 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:309:24
    |
309 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:317:24
    |
317 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
652 | / define_keywords! {
653 | |     "abstract"    pub struct Abstract     /// `abstract`
654 | |     "as"          pub struct As           /// `as`
655 | |     "async"       pub struct Async        /// `async`
...   |
704 | |     "yield"       pub struct Yield        /// `yield`
705 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_keywords` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:444:24
    |
444 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:452:24
    |
452 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:394:24
    |
394 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:398:24
    |
398 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
707 | / define_punctuation! {
708 | |     "+"           pub struct Add/1        /// `+`
709 | |     "+="          pub struct AddEq/2      /// `+=`
710 | |     "&"           pub struct And/1        /// `&`
...   |
753 | |     "~"           pub struct Tilde/1      /// `~`
754 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_punctuation_structs` which comes from the expansion of the macro `define_punctuation` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:503:24
    |
503 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/token.rs:507:24
    |
507 |               #[cfg_attr(doc_cfg, doc(cfg(feature = "clone-impls")))]
    |                          ^^^^^^^
...
756 | / define_delimiters! {
757 | |     "{"           pub struct Brace        /// `{...}`
758 | |     "["           pub struct Bracket      /// `[...]`
759 | |     "("           pub struct Paren        /// `(...)`
760 | |     " "           pub struct Group        /// None-delimited group
761 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `define_delimiters` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/ident.rs:38:12
   |
38 | #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
   |            ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:463:12
    |
463 | #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |            ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:148:16
    |
148 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:329:16
    |
329 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:360:16
    |
360 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:336:1
    |
336 | / ast_enum_of_structs! {
337 | |     /// Content of a compile-time structured attribute.
338 | |     ///
339 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
370 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:377:16
    |
377 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:390:16
    |
390 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:417:16
    |
417 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:412:1
    |
412 | / ast_enum_of_structs! {
413 | |     /// Element of a compile-time attribute list.
414 | |     ///
415 | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
426 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:165:16
    |
165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:213:16
    |
213 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:223:16
    |
223 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:237:16
    |
237 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:251:16
    |
251 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:557:16
    |
557 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:565:16
    |
565 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:573:16
    |
573 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:581:16
    |
581 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:630:16
    |
630 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:644:16
    |
644 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/attr.rs:654:16
    |
654 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
 --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:9:16
  |
9 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
  |                ^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:36:16
   |
36 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:25:1
    |
25  | / ast_enum_of_structs! {
26  | |     /// Data stored within an enum variant or struct.
27  | |     ///
28  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
48  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:56:16
   |
56 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:68:16
   |
68 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:153:16
    |
153 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:185:16
    |
185 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:173:1
    |
173 | / ast_enum_of_structs! {
174 | |     /// The visibility level of an item: inherited or `pub` or
175 | |     /// `pub(restricted)`.
176 | |     ///
...   |
200 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:207:16
    |
207 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:218:16
    |
218 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:230:16
    |
230 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:246:16
    |
246 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:275:16
    |
275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:286:16
    |
286 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:327:16
    |
327 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:299:20
    |
299 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:315:20
    |
315 |         #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
    |                    ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:423:16
    |
423 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:436:16
    |
436 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:445:16
    |
445 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:454:16
    |
454 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:467:16
    |
467 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:474:16
    |
474 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/data.rs:481:16
    |
481 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
  --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:89:16
   |
89 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
   |                ^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
  --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:90:20
   |
90 |     #[cfg_attr(not(syn_no_non_exhaustive), non_exhaustive)]
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/macros.rs:155:20
    |
155 |           #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
    |                      ^^^^^^^
    |
   ::: /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:14:1
    |
14  | / ast_enum_of_structs! {
15  | |     /// A Rust expression.
16  | |     ///
17  | |     /// *This type is available only if Syn is built with the `"derive"` or `"full"`
...   |
250 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `generate_to_tokens` which comes from the expansion of the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:256:16
    |
256 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:268:16
    |
268 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:281:16
    |
281 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:294:16
    |
294 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:307:16
    |
307 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:321:16
    |
321 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:334:16
    |
334 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:346:16
    |
346 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:359:16
    |
359 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:373:16
    |
373 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:387:16
    |
387 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:400:16
    |
400 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:418:16
    |
418 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:431:16
    |
431 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:444:16
    |
444 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:464:16
    |
464 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:480:16
    |
480 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:495:16
    |
495 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:508:16
    |
508 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:523:16
    |
523 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:534:16
    |
534 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:547:16
    |
547 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:558:16
    |
558 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:572:16
    |
572 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:588:16
    |
588 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:604:16
    |
604 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:616:16
    |
616 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:629:16
    |
629 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:643:16
    |
643 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:657:16
    |
657 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:672:16
    |
672 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:687:16
    |
687 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:699:16
    |
699 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:711:16
    |
711 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:723:16
    |
723 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:737:16
    |
737 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:749:16
    |
749 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:761:16
    |
761 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:775:16
    |
775 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:850:16
    |
850 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:920:16
    |
920 |     #[cfg_attr(doc_cfg, doc(cfg(any(feature = "full", feature = "derive"))))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:968:16
    |
968 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:982:16
    |
982 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:999:16
    |
999 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
    |                ^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1021:16
     |
1021 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1049:16
     |
1049 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1065:16
     |
1065 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "full")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:246:15
    |
246 |         #[cfg(syn_no_non_exhaustive)]
    |               ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:784:40
    |
784 |     #[cfg(all(feature = "parsing", not(syn_no_const_vec_new)))]
    |                                        ^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
   --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:838:19
    |
838 |             #[cfg(syn_no_non_exhaustive)]
    |                   ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1159:16
     |
1159 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1880:16
     |
1880 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1975:16
     |
1975 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2001:16
     |
2001 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2063:16
     |
2063 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2084:16
     |
2084 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2101:16
     |
2101 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2119:16
     |
2119 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2147:16
     |
2147 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2165:16
     |
2165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2206:16
     |
2206 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2236:16
     |
2236 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2258:16
     |
2258 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2326:16
     |
2326 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2349:16
     |
2349 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2372:16
     |
2372 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2381:16
     |
2381 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2396:16
     |
2396 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2405:16
     |
2405 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2414:16
     |
2414 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2426:16
     |
2426 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2496:16
     |
2496 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2547:16
     |
2547 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2571:16
     |
2571 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2582:16
     |
2582 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2594:16
     |
2594 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2648:16
     |
2648 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2678:16
     |
2678 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2727:16
     |
2727 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2759:16
     |
2759 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2801:16
     |
2801 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2818:16
     |
2818 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2832:16
     |
2832 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2846:16
     |
2846 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2879:16
     |
2879 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2292:28
     |
2292 |                   #[cfg_attr(doc_cfg, doc(cfg(feature = "parsing")))]
     |                              ^^^^^^^
...
2309 | /     impl_by_parsing_expr! {
2310 | |         ExprAssign, Assign, "expected assignment expression",
2311 | |         ExprAssignOp, AssignOp, "expected compound assignment expression",
2312 | |         ExprAwait, Await, "expected await expression",
...    |
2322 | |         ExprType, Type, "expected type ascription expression",
2323 | |     }
     | |_____- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `impl_by_parsing_expr` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:1248:20
     |
1248 |         #[cfg_attr(doc_cfg, doc(cfg(all(feature = "full", feature = "parsing"))))]
     |                    ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_non_exhaustive`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2539:23
     |
2539 |                 #[cfg(syn_no_non_exhaustive)]
     |                       ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_non_exhaustive)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_non_exhaustive)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2905:23
     |
2905 |             #[cfg(not(syn_no_const_vec_new))]
     |                       ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `syn_no_const_vec_new`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2907:19
     |
2907 |             #[cfg(syn_no_const_vec_new)]
     |                   ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(syn_no_const_vec_new)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(syn_no_const_vec_new)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2988:16
     |
2988 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:2998:16
     |
2998 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3008:16
     |
3008 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3020:16
     |
3020 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3035:16
     |
3035 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3046:16
     |
3046 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3057:16
     |
3057 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3072:16
     |
3072 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3082:16
     |
3082 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3091:16
     |
3091 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3099:16
     |
3099 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3110:16
     |
3110 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3141:16
     |
3141 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3153:16
     |
3153 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3165:16
     |
3165 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3180:16
     |
3180 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3197:16
     |
3197 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3211:16
     |
3211 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3233:16
     |
3233 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3244:16
     |
3244 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3255:16
     |
3255 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3265:16
     |
3265 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3275:16
     |
3275 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3291:16
     |
3291 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3304:16
     |
3304 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3317:16
     |
3317 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3328:16
     |
3328 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3338:16
     |
3338 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3348:16
     |
3348 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3358:16
     |
3358 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3367:16
     |
3367 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3379:16
     |
3379 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3390:16
     |
3390 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3400:16
     |
3400 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3409:16
     |
3409 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3420:16
     |
3420 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3431:16
     |
3431 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3441:16
     |
3441 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3451:16
     |
3451 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3460:16
     |
3460 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3478:16
     |
3478 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3491:16
     |
3491 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]
     |                ^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(doc_cfg)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(doc_cfg)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `doc_cfg`
    --> /home/joandarc/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/syn-1.0.109/src/expr.rs:3501:16
     |
3501 |     #[cfg_attr(doc_cfg, doc(cfg(feature = "printing")))]